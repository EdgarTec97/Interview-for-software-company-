Git init (Iniciar control de versiones en el folder)
git status (Ver estado de los files dentro del repositorio)
git add -A (Agregar todos los archivos o quitar -A y poner el nombre del archivo con la extensión)
git commit -m " " (Agregar versión del proyecto)
git rm file.ext (remueve file del repositorio y del proyecto en general)
git log (Ver las versiones de la rama actual)
git branch (Muestra las ramas)
git branch log (Crea la rama log o cualquier nombre que se le asigne)
git checkout log (Cambia de rama en uso a log o cualquier rama que se ingrese)
git remote add origin https://github.com/EdgarTec97/social-network.git (Agrega repositorio github para subir la ultima versión guardada de la rama)
git config --get remote.origin.url (Ver el url de origin)
git push -u origin (Sube la versión HEAD de la rama en uso)
git log --pretty=oneline (Solo muestra el id de la versión y el nombre sin mostrar el autor ni fecha)
git restore block.html (regresa los cambios realizados)
git restore --staged block.html(-A) (Elimina los cambios guardados en GIT pero sin tocar el archivo)
git reset --soft HEAD~1 (Elimina solo el commit pero dejando los cambios listos para guardar la versión, el 1 es la versión anterior, 2 la penultima)
git reset --mixed HEAD~1 (Ademas de eliminar el commit, elimina el save de las modificaciónes pero los archivos siguen listos para guardarse)
git reset --hard HEAD~1 (Elimina todos los cambios del ultimo commit tanto en el repositorio como en los archivos)
git cherry-pick 000(Copia la versión de cualquier rama a la rama actual poniendolo como HEAD y lo asigna como nueva versión hija, los 0 se cambian por el id de la versión)
git cherry-pick 000 --no-commit (Igual que el anterior pero sin commit)
git cherry-pick 000 --edit(Si hace commit pero puedes cambiar el nombre de la versión)
git mergetool (resuelve conflictos de combinación)
git reset --merge (Me ayudó a resolver problema con cherry-pick)
git log --graph --oneline --decorate --all (Alinea todas las versiones de todas las ramas)
git rebase -i 00 (Cambian 00 por el id del commit anterior al commit que quieran eliminar dentro de la misma rama, se abre el editor y elminan el commit)
git stash (Guarda los cambios realizados en los archivos sin necesidad de hacer commit)
git stash list (Muestra todos los elementos guardados sin commit)
git stash pop stash@{0} (Recupera el elemento 0, lo borra de stash list y en git status vemos que está rojo para agregarlo)
git stash apply stash@{0} (igual que el de arriba pero no lo borra del stash list)
git rev-list --max-parents=0 HEAD (Obtienes primer commit del repositorio)
git bisect start (Ponerse en modo bisect que es para detectar bugs entre commits)
git bisect bad HEAD (instruccion para decirle a git que el commit de HEAD es incorrecto)
git bisect good 00 (Instrucción para decirle a git que ese commit es correcto)
git bisect good - git bisect bad (indicar si funciona bien o mal)
git bisect reset (Salir del modo bisect y arreglar error)
git show 00 (muestra info necesaria del commit problematico)
git blame file.ext (indica todo el code marcando linea por linea fecha introducida al commit, autor y hora y cual commit es)
git blame -L i-j (igual que arriba pero solo desde la linea i hasta la j)
git merge NOMBRE_DE_RAMA (fuciona ramas) #Tienen que tener ramas origin
//Limpiar linea temporal
git rebase (Lleva los commits de la rama que fue fusionada justo después del commit de la rama que se hizo la fusión)
git rebase -i HEAD~3(De forma interactiva indico antecesor el commit 3)
git squash ()

git branch -d NOMBRE_DE_LA_RAMA (borrar la rama)
